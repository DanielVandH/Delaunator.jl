var documenterSearchIndex = {"docs":
[{"location":"#Delaunator.jl","page":"Home","title":"Delaunator.jl","text":"","category":"section"},{"location":"#API-Overview","page":"Home","title":"API Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The API consists of a set of types for static triangulations, and getting  info about the triangulation. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"t = Triangulation(points)\ntriangles(t) # get an iterator over the triangles \ntriangles(t)\nedges(t) # get an iterator over the edges \nneighbors(t, i) # neighbors of point i\nhull(t) # get an iterator over the hull vertices\ninhull(t, i)\ndualcell(t, i) # get a description of the dual cell\ndualcell(t, centers, i) # \n\n\n# drawing methods to translate from data to polots... \nhullpoly(t)\nedgelines(t) \n\n# methods to get work with dualcell polys\np = dualcell(t, 1)\ncontains(p, pt)\nsegments(p)\nclippedpoly(p, bbox)","category":"page"},{"location":"","page":"Home","title":"Home","text":"There is also a set of types for more dynamic scenarios, where you may not want all the computed information for speed. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"bt, cdata = basictriangulation(points; [maxpoints=Integer]) # initialize data structures \nbt, cdata = update!(bt, points, cdata) # after the points have been changed, may incur allocations\nh = gethull(bt, cdata)\nindex = index_halfedges(bt, cdata)\n!(cc, bt) # compute  ","category":"page"},{"location":"#Planned-implementations","page":"Home","title":"Planned implementations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# cell diagram methods\ncells(t, bbox) #  get an iterator over the nearest point / voronoi cells given the bounding box\nbd = celldiagram(t [, centers]; [margin=0.05, boundingbox=mar()])\ncellarea(t, i, [bbox]) # get cell area given bbox \ncellneighbors(t, i, [bbox]) # get cell neighbors given bbox \n\n# searching methods\nnearestpoint(t, p)\nfindtriangle(t, p)\n``\n\n\n\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"@index","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"@autodocs Modules = [Delaunator] ```","category":"page"}]
}
